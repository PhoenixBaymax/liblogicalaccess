// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iks.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_iks_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_iks_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_iks_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_iks_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_iks_2eproto;
class CMSG_AESOperation;
class CMSG_AESOperationDefaultTypeInternal;
extern CMSG_AESOperationDefaultTypeInternal _CMSG_AESOperation_default_instance_;
class CMSG_DesfireAESAuth_Step1;
class CMSG_DesfireAESAuth_Step1DefaultTypeInternal;
extern CMSG_DesfireAESAuth_Step1DefaultTypeInternal _CMSG_DesfireAESAuth_Step1_default_instance_;
class CMSG_DesfireAuth_Step2;
class CMSG_DesfireAuth_Step2DefaultTypeInternal;
extern CMSG_DesfireAuth_Step2DefaultTypeInternal _CMSG_DesfireAuth_Step2_default_instance_;
class CMSG_DesfireChangeKey;
class CMSG_DesfireChangeKeyDefaultTypeInternal;
extern CMSG_DesfireChangeKeyDefaultTypeInternal _CMSG_DesfireChangeKey_default_instance_;
class CMSG_DesfireISOAuth_Step1;
class CMSG_DesfireISOAuth_Step1DefaultTypeInternal;
extern CMSG_DesfireISOAuth_Step1DefaultTypeInternal _CMSG_DesfireISOAuth_Step1_default_instance_;
class CMSG_GenRandom;
class CMSG_GenRandomDefaultTypeInternal;
extern CMSG_GenRandomDefaultTypeInternal _CMSG_GenRandom_default_instance_;
class KeyDiversificationInfo;
class KeyDiversificationInfoDefaultTypeInternal;
extern KeyDiversificationInfoDefaultTypeInternal _KeyDiversificationInfo_default_instance_;
class SMSG_AESResult;
class SMSG_AESResultDefaultTypeInternal;
extern SMSG_AESResultDefaultTypeInternal _SMSG_AESResult_default_instance_;
class SMSG_DesfireAESAuth_Step1;
class SMSG_DesfireAESAuth_Step1DefaultTypeInternal;
extern SMSG_DesfireAESAuth_Step1DefaultTypeInternal _SMSG_DesfireAESAuth_Step1_default_instance_;
class SMSG_DesfireAuth_Step2;
class SMSG_DesfireAuth_Step2DefaultTypeInternal;
extern SMSG_DesfireAuth_Step2DefaultTypeInternal _SMSG_DesfireAuth_Step2_default_instance_;
class SMSG_DesfireChangeKey;
class SMSG_DesfireChangeKeyDefaultTypeInternal;
extern SMSG_DesfireChangeKeyDefaultTypeInternal _SMSG_DesfireChangeKey_default_instance_;
class SMSG_DesfireISOAuth_Step1;
class SMSG_DesfireISOAuth_Step1DefaultTypeInternal;
extern SMSG_DesfireISOAuth_Step1DefaultTypeInternal _SMSG_DesfireISOAuth_Step1_default_instance_;
class SMSG_GenRandom;
class SMSG_GenRandomDefaultTypeInternal;
extern SMSG_GenRandomDefaultTypeInternal _SMSG_GenRandom_default_instance_;
class SignatureDescription;
class SignatureDescriptionDefaultTypeInternal;
extern SignatureDescriptionDefaultTypeInternal _SignatureDescription_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMSG_AESOperation* Arena::CreateMaybeMessage<::CMSG_AESOperation>(Arena*);
template<> ::CMSG_DesfireAESAuth_Step1* Arena::CreateMaybeMessage<::CMSG_DesfireAESAuth_Step1>(Arena*);
template<> ::CMSG_DesfireAuth_Step2* Arena::CreateMaybeMessage<::CMSG_DesfireAuth_Step2>(Arena*);
template<> ::CMSG_DesfireChangeKey* Arena::CreateMaybeMessage<::CMSG_DesfireChangeKey>(Arena*);
template<> ::CMSG_DesfireISOAuth_Step1* Arena::CreateMaybeMessage<::CMSG_DesfireISOAuth_Step1>(Arena*);
template<> ::CMSG_GenRandom* Arena::CreateMaybeMessage<::CMSG_GenRandom>(Arena*);
template<> ::KeyDiversificationInfo* Arena::CreateMaybeMessage<::KeyDiversificationInfo>(Arena*);
template<> ::SMSG_AESResult* Arena::CreateMaybeMessage<::SMSG_AESResult>(Arena*);
template<> ::SMSG_DesfireAESAuth_Step1* Arena::CreateMaybeMessage<::SMSG_DesfireAESAuth_Step1>(Arena*);
template<> ::SMSG_DesfireAuth_Step2* Arena::CreateMaybeMessage<::SMSG_DesfireAuth_Step2>(Arena*);
template<> ::SMSG_DesfireChangeKey* Arena::CreateMaybeMessage<::SMSG_DesfireChangeKey>(Arena*);
template<> ::SMSG_DesfireISOAuth_Step1* Arena::CreateMaybeMessage<::SMSG_DesfireISOAuth_Step1>(Arena*);
template<> ::SMSG_GenRandom* Arena::CreateMaybeMessage<::SMSG_GenRandom>(Arena*);
template<> ::SignatureDescription* Arena::CreateMaybeMessage<::SignatureDescription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum KeyDiversificationInfo_Type : int {
  KeyDiversificationInfo_Type_NONE = 0,
  KeyDiversificationInfo_Type_AV2 = 2,
  KeyDiversificationInfo_Type_KeyDiversificationInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KeyDiversificationInfo_Type_KeyDiversificationInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KeyDiversificationInfo_Type_IsValid(int value);
constexpr KeyDiversificationInfo_Type KeyDiversificationInfo_Type_Type_MIN = KeyDiversificationInfo_Type_NONE;
constexpr KeyDiversificationInfo_Type KeyDiversificationInfo_Type_Type_MAX = KeyDiversificationInfo_Type_AV2;
constexpr int KeyDiversificationInfo_Type_Type_ARRAYSIZE = KeyDiversificationInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyDiversificationInfo_Type_descriptor();
template<typename T>
inline const std::string& KeyDiversificationInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyDiversificationInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyDiversificationInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyDiversificationInfo_Type_descriptor(), enum_t_value);
}
inline bool KeyDiversificationInfo_Type_Parse(
    const std::string& name, KeyDiversificationInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyDiversificationInfo_Type>(
    KeyDiversificationInfo_Type_descriptor(), name, value);
}
// ===================================================================

class KeyDiversificationInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KeyDiversificationInfo) */ {
 public:
  KeyDiversificationInfo();
  virtual ~KeyDiversificationInfo();

  KeyDiversificationInfo(const KeyDiversificationInfo& from);
  KeyDiversificationInfo(KeyDiversificationInfo&& from) noexcept
    : KeyDiversificationInfo() {
    *this = ::std::move(from);
  }

  inline KeyDiversificationInfo& operator=(const KeyDiversificationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDiversificationInfo& operator=(KeyDiversificationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyDiversificationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyDiversificationInfo* internal_default_instance() {
    return reinterpret_cast<const KeyDiversificationInfo*>(
               &_KeyDiversificationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyDiversificationInfo& a, KeyDiversificationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDiversificationInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyDiversificationInfo* New() const final {
    return CreateMaybeMessage<KeyDiversificationInfo>(nullptr);
  }

  KeyDiversificationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyDiversificationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyDiversificationInfo& from);
  void MergeFrom(const KeyDiversificationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDiversificationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KeyDiversificationInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KeyDiversificationInfo_Type Type;
  static constexpr Type NONE =
    KeyDiversificationInfo_Type_NONE;
  static constexpr Type AV2 =
    KeyDiversificationInfo_Type_AV2;
  static inline bool Type_IsValid(int value) {
    return KeyDiversificationInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    KeyDiversificationInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    KeyDiversificationInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    KeyDiversificationInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return KeyDiversificationInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return KeyDiversificationInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return KeyDiversificationInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDivInputFieldNumber = 2,
    kDivTypeFieldNumber = 1,
  };
  // bytes div_input = 2;
  void clear_div_input();
  const std::string& div_input() const;
  void set_div_input(const std::string& value);
  void set_div_input(std::string&& value);
  void set_div_input(const char* value);
  void set_div_input(const void* value, size_t size);
  std::string* mutable_div_input();
  std::string* release_div_input();
  void set_allocated_div_input(std::string* div_input);

  // .KeyDiversificationInfo.Type div_type = 1;
  void clear_div_type();
  ::KeyDiversificationInfo_Type div_type() const;
  void set_div_type(::KeyDiversificationInfo_Type value);

  // @@protoc_insertion_point(class_scope:KeyDiversificationInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr div_input_;
  int div_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class SignatureDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SignatureDescription) */ {
 public:
  SignatureDescription();
  virtual ~SignatureDescription();

  SignatureDescription(const SignatureDescription& from);
  SignatureDescription(SignatureDescription&& from) noexcept
    : SignatureDescription() {
    *this = ::std::move(from);
  }

  inline SignatureDescription& operator=(const SignatureDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescription& operator=(SignatureDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignatureDescription* internal_default_instance() {
    return reinterpret_cast<const SignatureDescription*>(
               &_SignatureDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignatureDescription& a, SignatureDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureDescription* New() const final {
    return CreateMaybeMessage<SignatureDescription>(nullptr);
  }

  SignatureDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureDescription& from);
  void MergeFrom(const SignatureDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SignatureDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
    kRunUuidFieldNumber = 3,
    kNonceFieldNumber = 2,
    kTimestampFieldNumber = 4,
  };
  // bytes payload = 1;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // bytes run_uuid = 3;
  void clear_run_uuid();
  const std::string& run_uuid() const;
  void set_run_uuid(const std::string& value);
  void set_run_uuid(std::string&& value);
  void set_run_uuid(const char* value);
  void set_run_uuid(const void* value, size_t size);
  std::string* mutable_run_uuid();
  std::string* release_run_uuid();
  void set_allocated_run_uuid(std::string* run_uuid);

  // uint64 nonce = 2;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:SignatureDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class CMSG_DesfireChangeKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMSG_DesfireChangeKey) */ {
 public:
  CMSG_DesfireChangeKey();
  virtual ~CMSG_DesfireChangeKey();

  CMSG_DesfireChangeKey(const CMSG_DesfireChangeKey& from);
  CMSG_DesfireChangeKey(CMSG_DesfireChangeKey&& from) noexcept
    : CMSG_DesfireChangeKey() {
    *this = ::std::move(from);
  }

  inline CMSG_DesfireChangeKey& operator=(const CMSG_DesfireChangeKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMSG_DesfireChangeKey& operator=(CMSG_DesfireChangeKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMSG_DesfireChangeKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMSG_DesfireChangeKey* internal_default_instance() {
    return reinterpret_cast<const CMSG_DesfireChangeKey*>(
               &_CMSG_DesfireChangeKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMSG_DesfireChangeKey& a, CMSG_DesfireChangeKey& b) {
    a.Swap(&b);
  }
  inline void Swap(CMSG_DesfireChangeKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMSG_DesfireChangeKey* New() const final {
    return CreateMaybeMessage<CMSG_DesfireChangeKey>(nullptr);
  }

  CMSG_DesfireChangeKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMSG_DesfireChangeKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMSG_DesfireChangeKey& from);
  void MergeFrom(const CMSG_DesfireChangeKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMSG_DesfireChangeKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMSG_DesfireChangeKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldKeyUuidFieldNumber = 1,
    kOldKeyBytesFieldNumber = 2,
    kNewKeyUuidFieldNumber = 3,
    kNewKeyBytesFieldNumber = 4,
    kSessionKeyUuidFieldNumber = 6,
    kSessionKeyFieldNumber = 7,
    kIvFieldNumber = 11,
    kOldKeyDivFieldNumber = 8,
    kNewKeyDivFieldNumber = 9,
    kChangeSameKeyFieldNumber = 5,
    kKeyNumberFieldNumber = 10,
  };
  // string old_key_uuid = 1;
  void clear_old_key_uuid();
  const std::string& old_key_uuid() const;
  void set_old_key_uuid(const std::string& value);
  void set_old_key_uuid(std::string&& value);
  void set_old_key_uuid(const char* value);
  void set_old_key_uuid(const char* value, size_t size);
  std::string* mutable_old_key_uuid();
  std::string* release_old_key_uuid();
  void set_allocated_old_key_uuid(std::string* old_key_uuid);

  // bytes old_key_bytes = 2;
  void clear_old_key_bytes();
  const std::string& old_key_bytes() const;
  void set_old_key_bytes(const std::string& value);
  void set_old_key_bytes(std::string&& value);
  void set_old_key_bytes(const char* value);
  void set_old_key_bytes(const void* value, size_t size);
  std::string* mutable_old_key_bytes();
  std::string* release_old_key_bytes();
  void set_allocated_old_key_bytes(std::string* old_key_bytes);

  // string new_key_uuid = 3;
  void clear_new_key_uuid();
  const std::string& new_key_uuid() const;
  void set_new_key_uuid(const std::string& value);
  void set_new_key_uuid(std::string&& value);
  void set_new_key_uuid(const char* value);
  void set_new_key_uuid(const char* value, size_t size);
  std::string* mutable_new_key_uuid();
  std::string* release_new_key_uuid();
  void set_allocated_new_key_uuid(std::string* new_key_uuid);

  // bytes new_key_bytes = 4;
  void clear_new_key_bytes();
  const std::string& new_key_bytes() const;
  void set_new_key_bytes(const std::string& value);
  void set_new_key_bytes(std::string&& value);
  void set_new_key_bytes(const char* value);
  void set_new_key_bytes(const void* value, size_t size);
  std::string* mutable_new_key_bytes();
  std::string* release_new_key_bytes();
  void set_allocated_new_key_bytes(std::string* new_key_bytes);

  // string session_key_uuid = 6;
  void clear_session_key_uuid();
  const std::string& session_key_uuid() const;
  void set_session_key_uuid(const std::string& value);
  void set_session_key_uuid(std::string&& value);
  void set_session_key_uuid(const char* value);
  void set_session_key_uuid(const char* value, size_t size);
  std::string* mutable_session_key_uuid();
  std::string* release_session_key_uuid();
  void set_allocated_session_key_uuid(std::string* session_key_uuid);

  // bytes session_key = 7;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const void* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);

  // bytes iv = 11;
  void clear_iv();
  const std::string& iv() const;
  void set_iv(const std::string& value);
  void set_iv(std::string&& value);
  void set_iv(const char* value);
  void set_iv(const void* value, size_t size);
  std::string* mutable_iv();
  std::string* release_iv();
  void set_allocated_iv(std::string* iv);

  // .KeyDiversificationInfo old_key_div = 8;
  bool has_old_key_div() const;
  void clear_old_key_div();
  const ::KeyDiversificationInfo& old_key_div() const;
  ::KeyDiversificationInfo* release_old_key_div();
  ::KeyDiversificationInfo* mutable_old_key_div();
  void set_allocated_old_key_div(::KeyDiversificationInfo* old_key_div);

  // .KeyDiversificationInfo new_key_div = 9;
  bool has_new_key_div() const;
  void clear_new_key_div();
  const ::KeyDiversificationInfo& new_key_div() const;
  ::KeyDiversificationInfo* release_new_key_div();
  ::KeyDiversificationInfo* mutable_new_key_div();
  void set_allocated_new_key_div(::KeyDiversificationInfo* new_key_div);

  // bool change_same_key = 5;
  void clear_change_same_key();
  bool change_same_key() const;
  void set_change_same_key(bool value);

  // int32 key_number = 10;
  void clear_key_number();
  ::PROTOBUF_NAMESPACE_ID::int32 key_number() const;
  void set_key_number(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:CMSG_DesfireChangeKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_key_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_key_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_key_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_key_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iv_;
  ::KeyDiversificationInfo* old_key_div_;
  ::KeyDiversificationInfo* new_key_div_;
  bool change_same_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class SMSG_DesfireChangeKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMSG_DesfireChangeKey) */ {
 public:
  SMSG_DesfireChangeKey();
  virtual ~SMSG_DesfireChangeKey();

  SMSG_DesfireChangeKey(const SMSG_DesfireChangeKey& from);
  SMSG_DesfireChangeKey(SMSG_DesfireChangeKey&& from) noexcept
    : SMSG_DesfireChangeKey() {
    *this = ::std::move(from);
  }

  inline SMSG_DesfireChangeKey& operator=(const SMSG_DesfireChangeKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMSG_DesfireChangeKey& operator=(SMSG_DesfireChangeKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMSG_DesfireChangeKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSG_DesfireChangeKey* internal_default_instance() {
    return reinterpret_cast<const SMSG_DesfireChangeKey*>(
               &_SMSG_DesfireChangeKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SMSG_DesfireChangeKey& a, SMSG_DesfireChangeKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SMSG_DesfireChangeKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMSG_DesfireChangeKey* New() const final {
    return CreateMaybeMessage<SMSG_DesfireChangeKey>(nullptr);
  }

  SMSG_DesfireChangeKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMSG_DesfireChangeKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMSG_DesfireChangeKey& from);
  void MergeFrom(const SMSG_DesfireChangeKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSG_DesfireChangeKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMSG_DesfireChangeKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCryptogramFieldNumber = 1,
  };
  // bytes cryptogram = 1;
  void clear_cryptogram();
  const std::string& cryptogram() const;
  void set_cryptogram(const std::string& value);
  void set_cryptogram(std::string&& value);
  void set_cryptogram(const char* value);
  void set_cryptogram(const void* value, size_t size);
  std::string* mutable_cryptogram();
  std::string* release_cryptogram();
  void set_allocated_cryptogram(std::string* cryptogram);

  // @@protoc_insertion_point(class_scope:SMSG_DesfireChangeKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cryptogram_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class CMSG_GenRandom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMSG_GenRandom) */ {
 public:
  CMSG_GenRandom();
  virtual ~CMSG_GenRandom();

  CMSG_GenRandom(const CMSG_GenRandom& from);
  CMSG_GenRandom(CMSG_GenRandom&& from) noexcept
    : CMSG_GenRandom() {
    *this = ::std::move(from);
  }

  inline CMSG_GenRandom& operator=(const CMSG_GenRandom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMSG_GenRandom& operator=(CMSG_GenRandom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMSG_GenRandom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMSG_GenRandom* internal_default_instance() {
    return reinterpret_cast<const CMSG_GenRandom*>(
               &_CMSG_GenRandom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMSG_GenRandom& a, CMSG_GenRandom& b) {
    a.Swap(&b);
  }
  inline void Swap(CMSG_GenRandom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMSG_GenRandom* New() const final {
    return CreateMaybeMessage<CMSG_GenRandom>(nullptr);
  }

  CMSG_GenRandom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMSG_GenRandom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMSG_GenRandom& from);
  void MergeFrom(const CMSG_GenRandom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMSG_GenRandom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMSG_GenRandom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // int32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:CMSG_GenRandom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class SMSG_GenRandom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMSG_GenRandom) */ {
 public:
  SMSG_GenRandom();
  virtual ~SMSG_GenRandom();

  SMSG_GenRandom(const SMSG_GenRandom& from);
  SMSG_GenRandom(SMSG_GenRandom&& from) noexcept
    : SMSG_GenRandom() {
    *this = ::std::move(from);
  }

  inline SMSG_GenRandom& operator=(const SMSG_GenRandom& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMSG_GenRandom& operator=(SMSG_GenRandom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMSG_GenRandom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSG_GenRandom* internal_default_instance() {
    return reinterpret_cast<const SMSG_GenRandom*>(
               &_SMSG_GenRandom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SMSG_GenRandom& a, SMSG_GenRandom& b) {
    a.Swap(&b);
  }
  inline void Swap(SMSG_GenRandom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMSG_GenRandom* New() const final {
    return CreateMaybeMessage<SMSG_GenRandom>(nullptr);
  }

  SMSG_GenRandom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMSG_GenRandom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMSG_GenRandom& from);
  void MergeFrom(const SMSG_GenRandom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSG_GenRandom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMSG_GenRandom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandomBytesFieldNumber = 1,
  };
  // bytes randomBytes = 1;
  void clear_randombytes();
  const std::string& randombytes() const;
  void set_randombytes(const std::string& value);
  void set_randombytes(std::string&& value);
  void set_randombytes(const char* value);
  void set_randombytes(const void* value, size_t size);
  std::string* mutable_randombytes();
  std::string* release_randombytes();
  void set_allocated_randombytes(std::string* randombytes);

  // @@protoc_insertion_point(class_scope:SMSG_GenRandom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randombytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class CMSG_AESOperation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMSG_AESOperation) */ {
 public:
  CMSG_AESOperation();
  virtual ~CMSG_AESOperation();

  CMSG_AESOperation(const CMSG_AESOperation& from);
  CMSG_AESOperation(CMSG_AESOperation&& from) noexcept
    : CMSG_AESOperation() {
    *this = ::std::move(from);
  }

  inline CMSG_AESOperation& operator=(const CMSG_AESOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMSG_AESOperation& operator=(CMSG_AESOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMSG_AESOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMSG_AESOperation* internal_default_instance() {
    return reinterpret_cast<const CMSG_AESOperation*>(
               &_CMSG_AESOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMSG_AESOperation& a, CMSG_AESOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(CMSG_AESOperation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMSG_AESOperation* New() const final {
    return CreateMaybeMessage<CMSG_AESOperation>(nullptr);
  }

  CMSG_AESOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMSG_AESOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMSG_AESOperation& from);
  void MergeFrom(const CMSG_AESOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMSG_AESOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMSG_AESOperation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyUuidFieldNumber = 1,
    kPayloadFieldNumber = 3,
    kIvFieldNumber = 4,
    kDiversificationFieldNumber = 6,
    kRequestSignatureFieldNumber = 5,
  };
  // string key_uuid = 1;
  void clear_key_uuid();
  const std::string& key_uuid() const;
  void set_key_uuid(const std::string& value);
  void set_key_uuid(std::string&& value);
  void set_key_uuid(const char* value);
  void set_key_uuid(const char* value, size_t size);
  std::string* mutable_key_uuid();
  std::string* release_key_uuid();
  void set_allocated_key_uuid(std::string* key_uuid);

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // bytes iv = 4;
  void clear_iv();
  const std::string& iv() const;
  void set_iv(const std::string& value);
  void set_iv(std::string&& value);
  void set_iv(const char* value);
  void set_iv(const void* value, size_t size);
  std::string* mutable_iv();
  std::string* release_iv();
  void set_allocated_iv(std::string* iv);

  // .KeyDiversificationInfo diversification = 6;
  bool has_diversification() const;
  void clear_diversification();
  const ::KeyDiversificationInfo& diversification() const;
  ::KeyDiversificationInfo* release_diversification();
  ::KeyDiversificationInfo* mutable_diversification();
  void set_allocated_diversification(::KeyDiversificationInfo* diversification);

  // bool request_signature = 5;
  void clear_request_signature();
  bool request_signature() const;
  void set_request_signature(bool value);

  // @@protoc_insertion_point(class_scope:CMSG_AESOperation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iv_;
  ::KeyDiversificationInfo* diversification_;
  bool request_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class SMSG_AESResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMSG_AESResult) */ {
 public:
  SMSG_AESResult();
  virtual ~SMSG_AESResult();

  SMSG_AESResult(const SMSG_AESResult& from);
  SMSG_AESResult(SMSG_AESResult&& from) noexcept
    : SMSG_AESResult() {
    *this = ::std::move(from);
  }

  inline SMSG_AESResult& operator=(const SMSG_AESResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMSG_AESResult& operator=(SMSG_AESResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMSG_AESResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSG_AESResult* internal_default_instance() {
    return reinterpret_cast<const SMSG_AESResult*>(
               &_SMSG_AESResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SMSG_AESResult& a, SMSG_AESResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SMSG_AESResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMSG_AESResult* New() const final {
    return CreateMaybeMessage<SMSG_AESResult>(nullptr);
  }

  SMSG_AESResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMSG_AESResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMSG_AESResult& from);
  void MergeFrom(const SMSG_AESResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSG_AESResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMSG_AESResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
    kSignatureFieldNumber = 3,
    kSignatureDescriptionFieldNumber = 2,
  };
  // bytes payload = 1;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // .SignatureDescription signatureDescription = 2;
  bool has_signaturedescription() const;
  void clear_signaturedescription();
  const ::SignatureDescription& signaturedescription() const;
  ::SignatureDescription* release_signaturedescription();
  ::SignatureDescription* mutable_signaturedescription();
  void set_allocated_signaturedescription(::SignatureDescription* signaturedescription);

  // @@protoc_insertion_point(class_scope:SMSG_AESResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::SignatureDescription* signaturedescription_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class CMSG_DesfireAESAuth_Step1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMSG_DesfireAESAuth_Step1) */ {
 public:
  CMSG_DesfireAESAuth_Step1();
  virtual ~CMSG_DesfireAESAuth_Step1();

  CMSG_DesfireAESAuth_Step1(const CMSG_DesfireAESAuth_Step1& from);
  CMSG_DesfireAESAuth_Step1(CMSG_DesfireAESAuth_Step1&& from) noexcept
    : CMSG_DesfireAESAuth_Step1() {
    *this = ::std::move(from);
  }

  inline CMSG_DesfireAESAuth_Step1& operator=(const CMSG_DesfireAESAuth_Step1& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMSG_DesfireAESAuth_Step1& operator=(CMSG_DesfireAESAuth_Step1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMSG_DesfireAESAuth_Step1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMSG_DesfireAESAuth_Step1* internal_default_instance() {
    return reinterpret_cast<const CMSG_DesfireAESAuth_Step1*>(
               &_CMSG_DesfireAESAuth_Step1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMSG_DesfireAESAuth_Step1& a, CMSG_DesfireAESAuth_Step1& b) {
    a.Swap(&b);
  }
  inline void Swap(CMSG_DesfireAESAuth_Step1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMSG_DesfireAESAuth_Step1* New() const final {
    return CreateMaybeMessage<CMSG_DesfireAESAuth_Step1>(nullptr);
  }

  CMSG_DesfireAESAuth_Step1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMSG_DesfireAESAuth_Step1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMSG_DesfireAESAuth_Step1& from);
  void MergeFrom(const CMSG_DesfireAESAuth_Step1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMSG_DesfireAESAuth_Step1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMSG_DesfireAESAuth_Step1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyUuidFieldNumber = 1,
    kEncryptedRandomPiccFieldNumber = 2,
    kDiversificationFieldNumber = 3,
  };
  // string key_uuid = 1;
  void clear_key_uuid();
  const std::string& key_uuid() const;
  void set_key_uuid(const std::string& value);
  void set_key_uuid(std::string&& value);
  void set_key_uuid(const char* value);
  void set_key_uuid(const char* value, size_t size);
  std::string* mutable_key_uuid();
  std::string* release_key_uuid();
  void set_allocated_key_uuid(std::string* key_uuid);

  // bytes encrypted_random_picc = 2;
  void clear_encrypted_random_picc();
  const std::string& encrypted_random_picc() const;
  void set_encrypted_random_picc(const std::string& value);
  void set_encrypted_random_picc(std::string&& value);
  void set_encrypted_random_picc(const char* value);
  void set_encrypted_random_picc(const void* value, size_t size);
  std::string* mutable_encrypted_random_picc();
  std::string* release_encrypted_random_picc();
  void set_allocated_encrypted_random_picc(std::string* encrypted_random_picc);

  // .KeyDiversificationInfo diversification = 3;
  bool has_diversification() const;
  void clear_diversification();
  const ::KeyDiversificationInfo& diversification() const;
  ::KeyDiversificationInfo* release_diversification();
  ::KeyDiversificationInfo* mutable_diversification();
  void set_allocated_diversification(::KeyDiversificationInfo* diversification);

  // @@protoc_insertion_point(class_scope:CMSG_DesfireAESAuth_Step1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_random_picc_;
  ::KeyDiversificationInfo* diversification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class SMSG_DesfireAESAuth_Step1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMSG_DesfireAESAuth_Step1) */ {
 public:
  SMSG_DesfireAESAuth_Step1();
  virtual ~SMSG_DesfireAESAuth_Step1();

  SMSG_DesfireAESAuth_Step1(const SMSG_DesfireAESAuth_Step1& from);
  SMSG_DesfireAESAuth_Step1(SMSG_DesfireAESAuth_Step1&& from) noexcept
    : SMSG_DesfireAESAuth_Step1() {
    *this = ::std::move(from);
  }

  inline SMSG_DesfireAESAuth_Step1& operator=(const SMSG_DesfireAESAuth_Step1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMSG_DesfireAESAuth_Step1& operator=(SMSG_DesfireAESAuth_Step1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMSG_DesfireAESAuth_Step1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSG_DesfireAESAuth_Step1* internal_default_instance() {
    return reinterpret_cast<const SMSG_DesfireAESAuth_Step1*>(
               &_SMSG_DesfireAESAuth_Step1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SMSG_DesfireAESAuth_Step1& a, SMSG_DesfireAESAuth_Step1& b) {
    a.Swap(&b);
  }
  inline void Swap(SMSG_DesfireAESAuth_Step1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMSG_DesfireAESAuth_Step1* New() const final {
    return CreateMaybeMessage<SMSG_DesfireAESAuth_Step1>(nullptr);
  }

  SMSG_DesfireAESAuth_Step1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMSG_DesfireAESAuth_Step1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMSG_DesfireAESAuth_Step1& from);
  void MergeFrom(const SMSG_DesfireAESAuth_Step1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSG_DesfireAESAuth_Step1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMSG_DesfireAESAuth_Step1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedCryptogramFieldNumber = 3,
    kAuthContextIdFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // bytes encrypted_cryptogram = 3;
  void clear_encrypted_cryptogram();
  const std::string& encrypted_cryptogram() const;
  void set_encrypted_cryptogram(const std::string& value);
  void set_encrypted_cryptogram(std::string&& value);
  void set_encrypted_cryptogram(const char* value);
  void set_encrypted_cryptogram(const void* value, size_t size);
  std::string* mutable_encrypted_cryptogram();
  std::string* release_encrypted_cryptogram();
  void set_allocated_encrypted_cryptogram(std::string* encrypted_cryptogram);

  // bytes auth_context_id = 4;
  void clear_auth_context_id();
  const std::string& auth_context_id() const;
  void set_auth_context_id(const std::string& value);
  void set_auth_context_id(std::string&& value);
  void set_auth_context_id(const char* value);
  void set_auth_context_id(const void* value, size_t size);
  std::string* mutable_auth_context_id();
  std::string* release_auth_context_id();
  void set_allocated_auth_context_id(std::string* auth_context_id);

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:SMSG_DesfireAESAuth_Step1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_cryptogram_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_context_id_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class CMSG_DesfireISOAuth_Step1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMSG_DesfireISOAuth_Step1) */ {
 public:
  CMSG_DesfireISOAuth_Step1();
  virtual ~CMSG_DesfireISOAuth_Step1();

  CMSG_DesfireISOAuth_Step1(const CMSG_DesfireISOAuth_Step1& from);
  CMSG_DesfireISOAuth_Step1(CMSG_DesfireISOAuth_Step1&& from) noexcept
    : CMSG_DesfireISOAuth_Step1() {
    *this = ::std::move(from);
  }

  inline CMSG_DesfireISOAuth_Step1& operator=(const CMSG_DesfireISOAuth_Step1& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMSG_DesfireISOAuth_Step1& operator=(CMSG_DesfireISOAuth_Step1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMSG_DesfireISOAuth_Step1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMSG_DesfireISOAuth_Step1* internal_default_instance() {
    return reinterpret_cast<const CMSG_DesfireISOAuth_Step1*>(
               &_CMSG_DesfireISOAuth_Step1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMSG_DesfireISOAuth_Step1& a, CMSG_DesfireISOAuth_Step1& b) {
    a.Swap(&b);
  }
  inline void Swap(CMSG_DesfireISOAuth_Step1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMSG_DesfireISOAuth_Step1* New() const final {
    return CreateMaybeMessage<CMSG_DesfireISOAuth_Step1>(nullptr);
  }

  CMSG_DesfireISOAuth_Step1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMSG_DesfireISOAuth_Step1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMSG_DesfireISOAuth_Step1& from);
  void MergeFrom(const CMSG_DesfireISOAuth_Step1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMSG_DesfireISOAuth_Step1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMSG_DesfireISOAuth_Step1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyUuidFieldNumber = 1,
    kRandomPiccFieldNumber = 2,
    kDiversificationFieldNumber = 3,
  };
  // string key_uuid = 1;
  void clear_key_uuid();
  const std::string& key_uuid() const;
  void set_key_uuid(const std::string& value);
  void set_key_uuid(std::string&& value);
  void set_key_uuid(const char* value);
  void set_key_uuid(const char* value, size_t size);
  std::string* mutable_key_uuid();
  std::string* release_key_uuid();
  void set_allocated_key_uuid(std::string* key_uuid);

  // bytes random_picc = 2;
  void clear_random_picc();
  const std::string& random_picc() const;
  void set_random_picc(const std::string& value);
  void set_random_picc(std::string&& value);
  void set_random_picc(const char* value);
  void set_random_picc(const void* value, size_t size);
  std::string* mutable_random_picc();
  std::string* release_random_picc();
  void set_allocated_random_picc(std::string* random_picc);

  // .KeyDiversificationInfo diversification = 3;
  bool has_diversification() const;
  void clear_diversification();
  const ::KeyDiversificationInfo& diversification() const;
  ::KeyDiversificationInfo* release_diversification();
  ::KeyDiversificationInfo* mutable_diversification();
  void set_allocated_diversification(::KeyDiversificationInfo* diversification);

  // @@protoc_insertion_point(class_scope:CMSG_DesfireISOAuth_Step1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr random_picc_;
  ::KeyDiversificationInfo* diversification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class SMSG_DesfireISOAuth_Step1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMSG_DesfireISOAuth_Step1) */ {
 public:
  SMSG_DesfireISOAuth_Step1();
  virtual ~SMSG_DesfireISOAuth_Step1();

  SMSG_DesfireISOAuth_Step1(const SMSG_DesfireISOAuth_Step1& from);
  SMSG_DesfireISOAuth_Step1(SMSG_DesfireISOAuth_Step1&& from) noexcept
    : SMSG_DesfireISOAuth_Step1() {
    *this = ::std::move(from);
  }

  inline SMSG_DesfireISOAuth_Step1& operator=(const SMSG_DesfireISOAuth_Step1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMSG_DesfireISOAuth_Step1& operator=(SMSG_DesfireISOAuth_Step1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMSG_DesfireISOAuth_Step1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSG_DesfireISOAuth_Step1* internal_default_instance() {
    return reinterpret_cast<const SMSG_DesfireISOAuth_Step1*>(
               &_SMSG_DesfireISOAuth_Step1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SMSG_DesfireISOAuth_Step1& a, SMSG_DesfireISOAuth_Step1& b) {
    a.Swap(&b);
  }
  inline void Swap(SMSG_DesfireISOAuth_Step1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMSG_DesfireISOAuth_Step1* New() const final {
    return CreateMaybeMessage<SMSG_DesfireISOAuth_Step1>(nullptr);
  }

  SMSG_DesfireISOAuth_Step1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMSG_DesfireISOAuth_Step1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMSG_DesfireISOAuth_Step1& from);
  void MergeFrom(const SMSG_DesfireISOAuth_Step1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSG_DesfireISOAuth_Step1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMSG_DesfireISOAuth_Step1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandom2FieldNumber = 2,
    kEncryptedCryptogramFieldNumber = 3,
    kAuthContextIdFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // bytes random2 = 2;
  void clear_random2();
  const std::string& random2() const;
  void set_random2(const std::string& value);
  void set_random2(std::string&& value);
  void set_random2(const char* value);
  void set_random2(const void* value, size_t size);
  std::string* mutable_random2();
  std::string* release_random2();
  void set_allocated_random2(std::string* random2);

  // bytes encrypted_cryptogram = 3;
  void clear_encrypted_cryptogram();
  const std::string& encrypted_cryptogram() const;
  void set_encrypted_cryptogram(const std::string& value);
  void set_encrypted_cryptogram(std::string&& value);
  void set_encrypted_cryptogram(const char* value);
  void set_encrypted_cryptogram(const void* value, size_t size);
  std::string* mutable_encrypted_cryptogram();
  std::string* release_encrypted_cryptogram();
  void set_allocated_encrypted_cryptogram(std::string* encrypted_cryptogram);

  // bytes auth_context_id = 4;
  void clear_auth_context_id();
  const std::string& auth_context_id() const;
  void set_auth_context_id(const std::string& value);
  void set_auth_context_id(std::string&& value);
  void set_auth_context_id(const char* value);
  void set_auth_context_id(const void* value, size_t size);
  std::string* mutable_auth_context_id();
  std::string* release_auth_context_id();
  void set_allocated_auth_context_id(std::string* auth_context_id);

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:SMSG_DesfireISOAuth_Step1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr random2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_cryptogram_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_context_id_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class CMSG_DesfireAuth_Step2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMSG_DesfireAuth_Step2) */ {
 public:
  CMSG_DesfireAuth_Step2();
  virtual ~CMSG_DesfireAuth_Step2();

  CMSG_DesfireAuth_Step2(const CMSG_DesfireAuth_Step2& from);
  CMSG_DesfireAuth_Step2(CMSG_DesfireAuth_Step2&& from) noexcept
    : CMSG_DesfireAuth_Step2() {
    *this = ::std::move(from);
  }

  inline CMSG_DesfireAuth_Step2& operator=(const CMSG_DesfireAuth_Step2& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMSG_DesfireAuth_Step2& operator=(CMSG_DesfireAuth_Step2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMSG_DesfireAuth_Step2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMSG_DesfireAuth_Step2* internal_default_instance() {
    return reinterpret_cast<const CMSG_DesfireAuth_Step2*>(
               &_CMSG_DesfireAuth_Step2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMSG_DesfireAuth_Step2& a, CMSG_DesfireAuth_Step2& b) {
    a.Swap(&b);
  }
  inline void Swap(CMSG_DesfireAuth_Step2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMSG_DesfireAuth_Step2* New() const final {
    return CreateMaybeMessage<CMSG_DesfireAuth_Step2>(nullptr);
  }

  CMSG_DesfireAuth_Step2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMSG_DesfireAuth_Step2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMSG_DesfireAuth_Step2& from);
  void MergeFrom(const CMSG_DesfireAuth_Step2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMSG_DesfireAuth_Step2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMSG_DesfireAuth_Step2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyUuidFieldNumber = 1,
    kPiccCryptogramFieldNumber = 2,
    kAuthContextIdFieldNumber = 3,
    kDiversificationFieldNumber = 4,
  };
  // string key_uuid = 1;
  void clear_key_uuid();
  const std::string& key_uuid() const;
  void set_key_uuid(const std::string& value);
  void set_key_uuid(std::string&& value);
  void set_key_uuid(const char* value);
  void set_key_uuid(const char* value, size_t size);
  std::string* mutable_key_uuid();
  std::string* release_key_uuid();
  void set_allocated_key_uuid(std::string* key_uuid);

  // bytes picc_cryptogram = 2;
  void clear_picc_cryptogram();
  const std::string& picc_cryptogram() const;
  void set_picc_cryptogram(const std::string& value);
  void set_picc_cryptogram(std::string&& value);
  void set_picc_cryptogram(const char* value);
  void set_picc_cryptogram(const void* value, size_t size);
  std::string* mutable_picc_cryptogram();
  std::string* release_picc_cryptogram();
  void set_allocated_picc_cryptogram(std::string* picc_cryptogram);

  // bytes auth_context_id = 3;
  void clear_auth_context_id();
  const std::string& auth_context_id() const;
  void set_auth_context_id(const std::string& value);
  void set_auth_context_id(std::string&& value);
  void set_auth_context_id(const char* value);
  void set_auth_context_id(const void* value, size_t size);
  std::string* mutable_auth_context_id();
  std::string* release_auth_context_id();
  void set_allocated_auth_context_id(std::string* auth_context_id);

  // .KeyDiversificationInfo diversification = 4;
  bool has_diversification() const;
  void clear_diversification();
  const ::KeyDiversificationInfo& diversification() const;
  ::KeyDiversificationInfo* release_diversification();
  ::KeyDiversificationInfo* mutable_diversification();
  void set_allocated_diversification(::KeyDiversificationInfo* diversification);

  // @@protoc_insertion_point(class_scope:CMSG_DesfireAuth_Step2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picc_cryptogram_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_context_id_;
  ::KeyDiversificationInfo* diversification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// -------------------------------------------------------------------

class SMSG_DesfireAuth_Step2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMSG_DesfireAuth_Step2) */ {
 public:
  SMSG_DesfireAuth_Step2();
  virtual ~SMSG_DesfireAuth_Step2();

  SMSG_DesfireAuth_Step2(const SMSG_DesfireAuth_Step2& from);
  SMSG_DesfireAuth_Step2(SMSG_DesfireAuth_Step2&& from) noexcept
    : SMSG_DesfireAuth_Step2() {
    *this = ::std::move(from);
  }

  inline SMSG_DesfireAuth_Step2& operator=(const SMSG_DesfireAuth_Step2& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMSG_DesfireAuth_Step2& operator=(SMSG_DesfireAuth_Step2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMSG_DesfireAuth_Step2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSG_DesfireAuth_Step2* internal_default_instance() {
    return reinterpret_cast<const SMSG_DesfireAuth_Step2*>(
               &_SMSG_DesfireAuth_Step2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SMSG_DesfireAuth_Step2& a, SMSG_DesfireAuth_Step2& b) {
    a.Swap(&b);
  }
  inline void Swap(SMSG_DesfireAuth_Step2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMSG_DesfireAuth_Step2* New() const final {
    return CreateMaybeMessage<SMSG_DesfireAuth_Step2>(nullptr);
  }

  SMSG_DesfireAuth_Step2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMSG_DesfireAuth_Step2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMSG_DesfireAuth_Step2& from);
  void MergeFrom(const SMSG_DesfireAuth_Step2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSG_DesfireAuth_Step2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMSG_DesfireAuth_Step2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_iks_2eproto);
    return ::descriptor_table_iks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 2,
    kSessionKeyRefFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // bytes session_key = 2;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const void* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);

  // string session_key_ref = 3;
  void clear_session_key_ref();
  const std::string& session_key_ref() const;
  void set_session_key_ref(const std::string& value);
  void set_session_key_ref(std::string&& value);
  void set_session_key_ref(const char* value);
  void set_session_key_ref(const char* value, size_t size);
  std::string* mutable_session_key_ref();
  std::string* release_session_key_ref();
  void set_allocated_session_key_ref(std::string* session_key_ref);

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:SMSG_DesfireAuth_Step2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_ref_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_iks_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyDiversificationInfo

// .KeyDiversificationInfo.Type div_type = 1;
inline void KeyDiversificationInfo::clear_div_type() {
  div_type_ = 0;
}
inline ::KeyDiversificationInfo_Type KeyDiversificationInfo::div_type() const {
  // @@protoc_insertion_point(field_get:KeyDiversificationInfo.div_type)
  return static_cast< ::KeyDiversificationInfo_Type >(div_type_);
}
inline void KeyDiversificationInfo::set_div_type(::KeyDiversificationInfo_Type value) {
  
  div_type_ = value;
  // @@protoc_insertion_point(field_set:KeyDiversificationInfo.div_type)
}

// bytes div_input = 2;
inline void KeyDiversificationInfo::clear_div_input() {
  div_input_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyDiversificationInfo::div_input() const {
  // @@protoc_insertion_point(field_get:KeyDiversificationInfo.div_input)
  return div_input_.GetNoArena();
}
inline void KeyDiversificationInfo::set_div_input(const std::string& value) {
  
  div_input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyDiversificationInfo.div_input)
}
inline void KeyDiversificationInfo::set_div_input(std::string&& value) {
  
  div_input_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyDiversificationInfo.div_input)
}
inline void KeyDiversificationInfo::set_div_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  div_input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyDiversificationInfo.div_input)
}
inline void KeyDiversificationInfo::set_div_input(const void* value, size_t size) {
  
  div_input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyDiversificationInfo.div_input)
}
inline std::string* KeyDiversificationInfo::mutable_div_input() {
  
  // @@protoc_insertion_point(field_mutable:KeyDiversificationInfo.div_input)
  return div_input_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyDiversificationInfo::release_div_input() {
  // @@protoc_insertion_point(field_release:KeyDiversificationInfo.div_input)
  
  return div_input_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyDiversificationInfo::set_allocated_div_input(std::string* div_input) {
  if (div_input != nullptr) {
    
  } else {
    
  }
  div_input_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), div_input);
  // @@protoc_insertion_point(field_set_allocated:KeyDiversificationInfo.div_input)
}

// -------------------------------------------------------------------

// SignatureDescription

// bytes payload = 1;
inline void SignatureDescription::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignatureDescription::payload() const {
  // @@protoc_insertion_point(field_get:SignatureDescription.payload)
  return payload_.GetNoArena();
}
inline void SignatureDescription::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignatureDescription.payload)
}
inline void SignatureDescription::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignatureDescription.payload)
}
inline void SignatureDescription::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignatureDescription.payload)
}
inline void SignatureDescription::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignatureDescription.payload)
}
inline std::string* SignatureDescription::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:SignatureDescription.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignatureDescription::release_payload() {
  // @@protoc_insertion_point(field_release:SignatureDescription.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignatureDescription::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:SignatureDescription.payload)
}

// uint64 nonce = 2;
inline void SignatureDescription::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignatureDescription::nonce() const {
  // @@protoc_insertion_point(field_get:SignatureDescription.nonce)
  return nonce_;
}
inline void SignatureDescription::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:SignatureDescription.nonce)
}

// bytes run_uuid = 3;
inline void SignatureDescription::clear_run_uuid() {
  run_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignatureDescription::run_uuid() const {
  // @@protoc_insertion_point(field_get:SignatureDescription.run_uuid)
  return run_uuid_.GetNoArena();
}
inline void SignatureDescription::set_run_uuid(const std::string& value) {
  
  run_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignatureDescription.run_uuid)
}
inline void SignatureDescription::set_run_uuid(std::string&& value) {
  
  run_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignatureDescription.run_uuid)
}
inline void SignatureDescription::set_run_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  run_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignatureDescription.run_uuid)
}
inline void SignatureDescription::set_run_uuid(const void* value, size_t size) {
  
  run_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignatureDescription.run_uuid)
}
inline std::string* SignatureDescription::mutable_run_uuid() {
  
  // @@protoc_insertion_point(field_mutable:SignatureDescription.run_uuid)
  return run_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignatureDescription::release_run_uuid() {
  // @@protoc_insertion_point(field_release:SignatureDescription.run_uuid)
  
  return run_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignatureDescription::set_allocated_run_uuid(std::string* run_uuid) {
  if (run_uuid != nullptr) {
    
  } else {
    
  }
  run_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_uuid);
  // @@protoc_insertion_point(field_set_allocated:SignatureDescription.run_uuid)
}

// uint64 timestamp = 4;
inline void SignatureDescription::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignatureDescription::timestamp() const {
  // @@protoc_insertion_point(field_get:SignatureDescription.timestamp)
  return timestamp_;
}
inline void SignatureDescription::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:SignatureDescription.timestamp)
}

// -------------------------------------------------------------------

// CMSG_DesfireChangeKey

// string old_key_uuid = 1;
inline void CMSG_DesfireChangeKey::clear_old_key_uuid() {
  old_key_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireChangeKey::old_key_uuid() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.old_key_uuid)
  return old_key_uuid_.GetNoArena();
}
inline void CMSG_DesfireChangeKey::set_old_key_uuid(const std::string& value) {
  
  old_key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireChangeKey.old_key_uuid)
}
inline void CMSG_DesfireChangeKey::set_old_key_uuid(std::string&& value) {
  
  old_key_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireChangeKey.old_key_uuid)
}
inline void CMSG_DesfireChangeKey::set_old_key_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireChangeKey.old_key_uuid)
}
inline void CMSG_DesfireChangeKey::set_old_key_uuid(const char* value, size_t size) {
  
  old_key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireChangeKey.old_key_uuid)
}
inline std::string* CMSG_DesfireChangeKey::mutable_old_key_uuid() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireChangeKey.old_key_uuid)
  return old_key_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireChangeKey::release_old_key_uuid() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireChangeKey.old_key_uuid)
  
  return old_key_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireChangeKey::set_allocated_old_key_uuid(std::string* old_key_uuid) {
  if (old_key_uuid != nullptr) {
    
  } else {
    
  }
  old_key_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_key_uuid);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireChangeKey.old_key_uuid)
}

// bytes old_key_bytes = 2;
inline void CMSG_DesfireChangeKey::clear_old_key_bytes() {
  old_key_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireChangeKey::old_key_bytes() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.old_key_bytes)
  return old_key_bytes_.GetNoArena();
}
inline void CMSG_DesfireChangeKey::set_old_key_bytes(const std::string& value) {
  
  old_key_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireChangeKey.old_key_bytes)
}
inline void CMSG_DesfireChangeKey::set_old_key_bytes(std::string&& value) {
  
  old_key_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireChangeKey.old_key_bytes)
}
inline void CMSG_DesfireChangeKey::set_old_key_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_key_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireChangeKey.old_key_bytes)
}
inline void CMSG_DesfireChangeKey::set_old_key_bytes(const void* value, size_t size) {
  
  old_key_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireChangeKey.old_key_bytes)
}
inline std::string* CMSG_DesfireChangeKey::mutable_old_key_bytes() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireChangeKey.old_key_bytes)
  return old_key_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireChangeKey::release_old_key_bytes() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireChangeKey.old_key_bytes)
  
  return old_key_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireChangeKey::set_allocated_old_key_bytes(std::string* old_key_bytes) {
  if (old_key_bytes != nullptr) {
    
  } else {
    
  }
  old_key_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_key_bytes);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireChangeKey.old_key_bytes)
}

// string new_key_uuid = 3;
inline void CMSG_DesfireChangeKey::clear_new_key_uuid() {
  new_key_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireChangeKey::new_key_uuid() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.new_key_uuid)
  return new_key_uuid_.GetNoArena();
}
inline void CMSG_DesfireChangeKey::set_new_key_uuid(const std::string& value) {
  
  new_key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireChangeKey.new_key_uuid)
}
inline void CMSG_DesfireChangeKey::set_new_key_uuid(std::string&& value) {
  
  new_key_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireChangeKey.new_key_uuid)
}
inline void CMSG_DesfireChangeKey::set_new_key_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireChangeKey.new_key_uuid)
}
inline void CMSG_DesfireChangeKey::set_new_key_uuid(const char* value, size_t size) {
  
  new_key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireChangeKey.new_key_uuid)
}
inline std::string* CMSG_DesfireChangeKey::mutable_new_key_uuid() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireChangeKey.new_key_uuid)
  return new_key_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireChangeKey::release_new_key_uuid() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireChangeKey.new_key_uuid)
  
  return new_key_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireChangeKey::set_allocated_new_key_uuid(std::string* new_key_uuid) {
  if (new_key_uuid != nullptr) {
    
  } else {
    
  }
  new_key_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_key_uuid);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireChangeKey.new_key_uuid)
}

// bytes new_key_bytes = 4;
inline void CMSG_DesfireChangeKey::clear_new_key_bytes() {
  new_key_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireChangeKey::new_key_bytes() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.new_key_bytes)
  return new_key_bytes_.GetNoArena();
}
inline void CMSG_DesfireChangeKey::set_new_key_bytes(const std::string& value) {
  
  new_key_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireChangeKey.new_key_bytes)
}
inline void CMSG_DesfireChangeKey::set_new_key_bytes(std::string&& value) {
  
  new_key_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireChangeKey.new_key_bytes)
}
inline void CMSG_DesfireChangeKey::set_new_key_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_key_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireChangeKey.new_key_bytes)
}
inline void CMSG_DesfireChangeKey::set_new_key_bytes(const void* value, size_t size) {
  
  new_key_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireChangeKey.new_key_bytes)
}
inline std::string* CMSG_DesfireChangeKey::mutable_new_key_bytes() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireChangeKey.new_key_bytes)
  return new_key_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireChangeKey::release_new_key_bytes() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireChangeKey.new_key_bytes)
  
  return new_key_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireChangeKey::set_allocated_new_key_bytes(std::string* new_key_bytes) {
  if (new_key_bytes != nullptr) {
    
  } else {
    
  }
  new_key_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_key_bytes);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireChangeKey.new_key_bytes)
}

// bool change_same_key = 5;
inline void CMSG_DesfireChangeKey::clear_change_same_key() {
  change_same_key_ = false;
}
inline bool CMSG_DesfireChangeKey::change_same_key() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.change_same_key)
  return change_same_key_;
}
inline void CMSG_DesfireChangeKey::set_change_same_key(bool value) {
  
  change_same_key_ = value;
  // @@protoc_insertion_point(field_set:CMSG_DesfireChangeKey.change_same_key)
}

// string session_key_uuid = 6;
inline void CMSG_DesfireChangeKey::clear_session_key_uuid() {
  session_key_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireChangeKey::session_key_uuid() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.session_key_uuid)
  return session_key_uuid_.GetNoArena();
}
inline void CMSG_DesfireChangeKey::set_session_key_uuid(const std::string& value) {
  
  session_key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireChangeKey.session_key_uuid)
}
inline void CMSG_DesfireChangeKey::set_session_key_uuid(std::string&& value) {
  
  session_key_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireChangeKey.session_key_uuid)
}
inline void CMSG_DesfireChangeKey::set_session_key_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireChangeKey.session_key_uuid)
}
inline void CMSG_DesfireChangeKey::set_session_key_uuid(const char* value, size_t size) {
  
  session_key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireChangeKey.session_key_uuid)
}
inline std::string* CMSG_DesfireChangeKey::mutable_session_key_uuid() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireChangeKey.session_key_uuid)
  return session_key_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireChangeKey::release_session_key_uuid() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireChangeKey.session_key_uuid)
  
  return session_key_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireChangeKey::set_allocated_session_key_uuid(std::string* session_key_uuid) {
  if (session_key_uuid != nullptr) {
    
  } else {
    
  }
  session_key_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key_uuid);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireChangeKey.session_key_uuid)
}

// bytes session_key = 7;
inline void CMSG_DesfireChangeKey::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireChangeKey::session_key() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.session_key)
  return session_key_.GetNoArena();
}
inline void CMSG_DesfireChangeKey::set_session_key(const std::string& value) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireChangeKey.session_key)
}
inline void CMSG_DesfireChangeKey::set_session_key(std::string&& value) {
  
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireChangeKey.session_key)
}
inline void CMSG_DesfireChangeKey::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireChangeKey.session_key)
}
inline void CMSG_DesfireChangeKey::set_session_key(const void* value, size_t size) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireChangeKey.session_key)
}
inline std::string* CMSG_DesfireChangeKey::mutable_session_key() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireChangeKey.session_key)
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireChangeKey::release_session_key() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireChangeKey.session_key)
  
  return session_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireChangeKey::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireChangeKey.session_key)
}

// .KeyDiversificationInfo old_key_div = 8;
inline bool CMSG_DesfireChangeKey::has_old_key_div() const {
  return this != internal_default_instance() && old_key_div_ != nullptr;
}
inline void CMSG_DesfireChangeKey::clear_old_key_div() {
  if (GetArenaNoVirtual() == nullptr && old_key_div_ != nullptr) {
    delete old_key_div_;
  }
  old_key_div_ = nullptr;
}
inline const ::KeyDiversificationInfo& CMSG_DesfireChangeKey::old_key_div() const {
  const ::KeyDiversificationInfo* p = old_key_div_;
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.old_key_div)
  return p != nullptr ? *p : *reinterpret_cast<const ::KeyDiversificationInfo*>(
      &::_KeyDiversificationInfo_default_instance_);
}
inline ::KeyDiversificationInfo* CMSG_DesfireChangeKey::release_old_key_div() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireChangeKey.old_key_div)
  
  ::KeyDiversificationInfo* temp = old_key_div_;
  old_key_div_ = nullptr;
  return temp;
}
inline ::KeyDiversificationInfo* CMSG_DesfireChangeKey::mutable_old_key_div() {
  
  if (old_key_div_ == nullptr) {
    auto* p = CreateMaybeMessage<::KeyDiversificationInfo>(GetArenaNoVirtual());
    old_key_div_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireChangeKey.old_key_div)
  return old_key_div_;
}
inline void CMSG_DesfireChangeKey::set_allocated_old_key_div(::KeyDiversificationInfo* old_key_div) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete old_key_div_;
  }
  if (old_key_div) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      old_key_div = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_key_div, submessage_arena);
    }
    
  } else {
    
  }
  old_key_div_ = old_key_div;
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireChangeKey.old_key_div)
}

// .KeyDiversificationInfo new_key_div = 9;
inline bool CMSG_DesfireChangeKey::has_new_key_div() const {
  return this != internal_default_instance() && new_key_div_ != nullptr;
}
inline void CMSG_DesfireChangeKey::clear_new_key_div() {
  if (GetArenaNoVirtual() == nullptr && new_key_div_ != nullptr) {
    delete new_key_div_;
  }
  new_key_div_ = nullptr;
}
inline const ::KeyDiversificationInfo& CMSG_DesfireChangeKey::new_key_div() const {
  const ::KeyDiversificationInfo* p = new_key_div_;
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.new_key_div)
  return p != nullptr ? *p : *reinterpret_cast<const ::KeyDiversificationInfo*>(
      &::_KeyDiversificationInfo_default_instance_);
}
inline ::KeyDiversificationInfo* CMSG_DesfireChangeKey::release_new_key_div() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireChangeKey.new_key_div)
  
  ::KeyDiversificationInfo* temp = new_key_div_;
  new_key_div_ = nullptr;
  return temp;
}
inline ::KeyDiversificationInfo* CMSG_DesfireChangeKey::mutable_new_key_div() {
  
  if (new_key_div_ == nullptr) {
    auto* p = CreateMaybeMessage<::KeyDiversificationInfo>(GetArenaNoVirtual());
    new_key_div_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireChangeKey.new_key_div)
  return new_key_div_;
}
inline void CMSG_DesfireChangeKey::set_allocated_new_key_div(::KeyDiversificationInfo* new_key_div) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete new_key_div_;
  }
  if (new_key_div) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_key_div = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_key_div, submessage_arena);
    }
    
  } else {
    
  }
  new_key_div_ = new_key_div;
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireChangeKey.new_key_div)
}

// int32 key_number = 10;
inline void CMSG_DesfireChangeKey::clear_key_number() {
  key_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMSG_DesfireChangeKey::key_number() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.key_number)
  return key_number_;
}
inline void CMSG_DesfireChangeKey::set_key_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_number_ = value;
  // @@protoc_insertion_point(field_set:CMSG_DesfireChangeKey.key_number)
}

// bytes iv = 11;
inline void CMSG_DesfireChangeKey::clear_iv() {
  iv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireChangeKey::iv() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireChangeKey.iv)
  return iv_.GetNoArena();
}
inline void CMSG_DesfireChangeKey::set_iv(const std::string& value) {
  
  iv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireChangeKey.iv)
}
inline void CMSG_DesfireChangeKey::set_iv(std::string&& value) {
  
  iv_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireChangeKey.iv)
}
inline void CMSG_DesfireChangeKey::set_iv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireChangeKey.iv)
}
inline void CMSG_DesfireChangeKey::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireChangeKey.iv)
}
inline std::string* CMSG_DesfireChangeKey::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireChangeKey.iv)
  return iv_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireChangeKey::release_iv() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireChangeKey.iv)
  
  return iv_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireChangeKey::set_allocated_iv(std::string* iv) {
  if (iv != nullptr) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireChangeKey.iv)
}

// -------------------------------------------------------------------

// SMSG_DesfireChangeKey

// bytes cryptogram = 1;
inline void SMSG_DesfireChangeKey::clear_cryptogram() {
  cryptogram_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_DesfireChangeKey::cryptogram() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireChangeKey.cryptogram)
  return cryptogram_.GetNoArena();
}
inline void SMSG_DesfireChangeKey::set_cryptogram(const std::string& value) {
  
  cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_DesfireChangeKey.cryptogram)
}
inline void SMSG_DesfireChangeKey::set_cryptogram(std::string&& value) {
  
  cryptogram_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_DesfireChangeKey.cryptogram)
}
inline void SMSG_DesfireChangeKey::set_cryptogram(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_DesfireChangeKey.cryptogram)
}
inline void SMSG_DesfireChangeKey::set_cryptogram(const void* value, size_t size) {
  
  cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_DesfireChangeKey.cryptogram)
}
inline std::string* SMSG_DesfireChangeKey::mutable_cryptogram() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_DesfireChangeKey.cryptogram)
  return cryptogram_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_DesfireChangeKey::release_cryptogram() {
  // @@protoc_insertion_point(field_release:SMSG_DesfireChangeKey.cryptogram)
  
  return cryptogram_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_DesfireChangeKey::set_allocated_cryptogram(std::string* cryptogram) {
  if (cryptogram != nullptr) {
    
  } else {
    
  }
  cryptogram_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cryptogram);
  // @@protoc_insertion_point(field_set_allocated:SMSG_DesfireChangeKey.cryptogram)
}

// -------------------------------------------------------------------

// CMSG_GenRandom

// int32 size = 1;
inline void CMSG_GenRandom::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMSG_GenRandom::size() const {
  // @@protoc_insertion_point(field_get:CMSG_GenRandom.size)
  return size_;
}
inline void CMSG_GenRandom::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:CMSG_GenRandom.size)
}

// -------------------------------------------------------------------

// SMSG_GenRandom

// bytes randomBytes = 1;
inline void SMSG_GenRandom::clear_randombytes() {
  randombytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_GenRandom::randombytes() const {
  // @@protoc_insertion_point(field_get:SMSG_GenRandom.randomBytes)
  return randombytes_.GetNoArena();
}
inline void SMSG_GenRandom::set_randombytes(const std::string& value) {
  
  randombytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_GenRandom.randomBytes)
}
inline void SMSG_GenRandom::set_randombytes(std::string&& value) {
  
  randombytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_GenRandom.randomBytes)
}
inline void SMSG_GenRandom::set_randombytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  randombytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_GenRandom.randomBytes)
}
inline void SMSG_GenRandom::set_randombytes(const void* value, size_t size) {
  
  randombytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_GenRandom.randomBytes)
}
inline std::string* SMSG_GenRandom::mutable_randombytes() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_GenRandom.randomBytes)
  return randombytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_GenRandom::release_randombytes() {
  // @@protoc_insertion_point(field_release:SMSG_GenRandom.randomBytes)
  
  return randombytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_GenRandom::set_allocated_randombytes(std::string* randombytes) {
  if (randombytes != nullptr) {
    
  } else {
    
  }
  randombytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randombytes);
  // @@protoc_insertion_point(field_set_allocated:SMSG_GenRandom.randomBytes)
}

// -------------------------------------------------------------------

// CMSG_AESOperation

// string key_uuid = 1;
inline void CMSG_AESOperation::clear_key_uuid() {
  key_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_AESOperation::key_uuid() const {
  // @@protoc_insertion_point(field_get:CMSG_AESOperation.key_uuid)
  return key_uuid_.GetNoArena();
}
inline void CMSG_AESOperation::set_key_uuid(const std::string& value) {
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_AESOperation.key_uuid)
}
inline void CMSG_AESOperation::set_key_uuid(std::string&& value) {
  
  key_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_AESOperation.key_uuid)
}
inline void CMSG_AESOperation::set_key_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_AESOperation.key_uuid)
}
inline void CMSG_AESOperation::set_key_uuid(const char* value, size_t size) {
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_AESOperation.key_uuid)
}
inline std::string* CMSG_AESOperation::mutable_key_uuid() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_AESOperation.key_uuid)
  return key_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_AESOperation::release_key_uuid() {
  // @@protoc_insertion_point(field_release:CMSG_AESOperation.key_uuid)
  
  return key_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_AESOperation::set_allocated_key_uuid(std::string* key_uuid) {
  if (key_uuid != nullptr) {
    
  } else {
    
  }
  key_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_uuid);
  // @@protoc_insertion_point(field_set_allocated:CMSG_AESOperation.key_uuid)
}

// bytes payload = 3;
inline void CMSG_AESOperation::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_AESOperation::payload() const {
  // @@protoc_insertion_point(field_get:CMSG_AESOperation.payload)
  return payload_.GetNoArena();
}
inline void CMSG_AESOperation::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_AESOperation.payload)
}
inline void CMSG_AESOperation::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_AESOperation.payload)
}
inline void CMSG_AESOperation::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_AESOperation.payload)
}
inline void CMSG_AESOperation::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_AESOperation.payload)
}
inline std::string* CMSG_AESOperation::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_AESOperation.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_AESOperation::release_payload() {
  // @@protoc_insertion_point(field_release:CMSG_AESOperation.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_AESOperation::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:CMSG_AESOperation.payload)
}

// bytes iv = 4;
inline void CMSG_AESOperation::clear_iv() {
  iv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_AESOperation::iv() const {
  // @@protoc_insertion_point(field_get:CMSG_AESOperation.iv)
  return iv_.GetNoArena();
}
inline void CMSG_AESOperation::set_iv(const std::string& value) {
  
  iv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_AESOperation.iv)
}
inline void CMSG_AESOperation::set_iv(std::string&& value) {
  
  iv_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_AESOperation.iv)
}
inline void CMSG_AESOperation::set_iv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_AESOperation.iv)
}
inline void CMSG_AESOperation::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_AESOperation.iv)
}
inline std::string* CMSG_AESOperation::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_AESOperation.iv)
  return iv_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_AESOperation::release_iv() {
  // @@protoc_insertion_point(field_release:CMSG_AESOperation.iv)
  
  return iv_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_AESOperation::set_allocated_iv(std::string* iv) {
  if (iv != nullptr) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:CMSG_AESOperation.iv)
}

// bool request_signature = 5;
inline void CMSG_AESOperation::clear_request_signature() {
  request_signature_ = false;
}
inline bool CMSG_AESOperation::request_signature() const {
  // @@protoc_insertion_point(field_get:CMSG_AESOperation.request_signature)
  return request_signature_;
}
inline void CMSG_AESOperation::set_request_signature(bool value) {
  
  request_signature_ = value;
  // @@protoc_insertion_point(field_set:CMSG_AESOperation.request_signature)
}

// .KeyDiversificationInfo diversification = 6;
inline bool CMSG_AESOperation::has_diversification() const {
  return this != internal_default_instance() && diversification_ != nullptr;
}
inline void CMSG_AESOperation::clear_diversification() {
  if (GetArenaNoVirtual() == nullptr && diversification_ != nullptr) {
    delete diversification_;
  }
  diversification_ = nullptr;
}
inline const ::KeyDiversificationInfo& CMSG_AESOperation::diversification() const {
  const ::KeyDiversificationInfo* p = diversification_;
  // @@protoc_insertion_point(field_get:CMSG_AESOperation.diversification)
  return p != nullptr ? *p : *reinterpret_cast<const ::KeyDiversificationInfo*>(
      &::_KeyDiversificationInfo_default_instance_);
}
inline ::KeyDiversificationInfo* CMSG_AESOperation::release_diversification() {
  // @@protoc_insertion_point(field_release:CMSG_AESOperation.diversification)
  
  ::KeyDiversificationInfo* temp = diversification_;
  diversification_ = nullptr;
  return temp;
}
inline ::KeyDiversificationInfo* CMSG_AESOperation::mutable_diversification() {
  
  if (diversification_ == nullptr) {
    auto* p = CreateMaybeMessage<::KeyDiversificationInfo>(GetArenaNoVirtual());
    diversification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMSG_AESOperation.diversification)
  return diversification_;
}
inline void CMSG_AESOperation::set_allocated_diversification(::KeyDiversificationInfo* diversification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete diversification_;
  }
  if (diversification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diversification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diversification, submessage_arena);
    }
    
  } else {
    
  }
  diversification_ = diversification;
  // @@protoc_insertion_point(field_set_allocated:CMSG_AESOperation.diversification)
}

// -------------------------------------------------------------------

// SMSG_AESResult

// bytes payload = 1;
inline void SMSG_AESResult::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_AESResult::payload() const {
  // @@protoc_insertion_point(field_get:SMSG_AESResult.payload)
  return payload_.GetNoArena();
}
inline void SMSG_AESResult::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_AESResult.payload)
}
inline void SMSG_AESResult::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_AESResult.payload)
}
inline void SMSG_AESResult::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_AESResult.payload)
}
inline void SMSG_AESResult::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_AESResult.payload)
}
inline std::string* SMSG_AESResult::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_AESResult.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_AESResult::release_payload() {
  // @@protoc_insertion_point(field_release:SMSG_AESResult.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_AESResult::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:SMSG_AESResult.payload)
}

// .SignatureDescription signatureDescription = 2;
inline bool SMSG_AESResult::has_signaturedescription() const {
  return this != internal_default_instance() && signaturedescription_ != nullptr;
}
inline void SMSG_AESResult::clear_signaturedescription() {
  if (GetArenaNoVirtual() == nullptr && signaturedescription_ != nullptr) {
    delete signaturedescription_;
  }
  signaturedescription_ = nullptr;
}
inline const ::SignatureDescription& SMSG_AESResult::signaturedescription() const {
  const ::SignatureDescription* p = signaturedescription_;
  // @@protoc_insertion_point(field_get:SMSG_AESResult.signatureDescription)
  return p != nullptr ? *p : *reinterpret_cast<const ::SignatureDescription*>(
      &::_SignatureDescription_default_instance_);
}
inline ::SignatureDescription* SMSG_AESResult::release_signaturedescription() {
  // @@protoc_insertion_point(field_release:SMSG_AESResult.signatureDescription)
  
  ::SignatureDescription* temp = signaturedescription_;
  signaturedescription_ = nullptr;
  return temp;
}
inline ::SignatureDescription* SMSG_AESResult::mutable_signaturedescription() {
  
  if (signaturedescription_ == nullptr) {
    auto* p = CreateMaybeMessage<::SignatureDescription>(GetArenaNoVirtual());
    signaturedescription_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SMSG_AESResult.signatureDescription)
  return signaturedescription_;
}
inline void SMSG_AESResult::set_allocated_signaturedescription(::SignatureDescription* signaturedescription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signaturedescription_;
  }
  if (signaturedescription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signaturedescription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signaturedescription, submessage_arena);
    }
    
  } else {
    
  }
  signaturedescription_ = signaturedescription;
  // @@protoc_insertion_point(field_set_allocated:SMSG_AESResult.signatureDescription)
}

// bytes signature = 3;
inline void SMSG_AESResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_AESResult::signature() const {
  // @@protoc_insertion_point(field_get:SMSG_AESResult.signature)
  return signature_.GetNoArena();
}
inline void SMSG_AESResult::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_AESResult.signature)
}
inline void SMSG_AESResult::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_AESResult.signature)
}
inline void SMSG_AESResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_AESResult.signature)
}
inline void SMSG_AESResult::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_AESResult.signature)
}
inline std::string* SMSG_AESResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_AESResult.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_AESResult::release_signature() {
  // @@protoc_insertion_point(field_release:SMSG_AESResult.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_AESResult::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:SMSG_AESResult.signature)
}

// -------------------------------------------------------------------

// CMSG_DesfireAESAuth_Step1

// string key_uuid = 1;
inline void CMSG_DesfireAESAuth_Step1::clear_key_uuid() {
  key_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireAESAuth_Step1::key_uuid() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireAESAuth_Step1.key_uuid)
  return key_uuid_.GetNoArena();
}
inline void CMSG_DesfireAESAuth_Step1::set_key_uuid(const std::string& value) {
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireAESAuth_Step1.key_uuid)
}
inline void CMSG_DesfireAESAuth_Step1::set_key_uuid(std::string&& value) {
  
  key_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireAESAuth_Step1.key_uuid)
}
inline void CMSG_DesfireAESAuth_Step1::set_key_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireAESAuth_Step1.key_uuid)
}
inline void CMSG_DesfireAESAuth_Step1::set_key_uuid(const char* value, size_t size) {
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireAESAuth_Step1.key_uuid)
}
inline std::string* CMSG_DesfireAESAuth_Step1::mutable_key_uuid() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireAESAuth_Step1.key_uuid)
  return key_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireAESAuth_Step1::release_key_uuid() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireAESAuth_Step1.key_uuid)
  
  return key_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireAESAuth_Step1::set_allocated_key_uuid(std::string* key_uuid) {
  if (key_uuid != nullptr) {
    
  } else {
    
  }
  key_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_uuid);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireAESAuth_Step1.key_uuid)
}

// bytes encrypted_random_picc = 2;
inline void CMSG_DesfireAESAuth_Step1::clear_encrypted_random_picc() {
  encrypted_random_picc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireAESAuth_Step1::encrypted_random_picc() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireAESAuth_Step1.encrypted_random_picc)
  return encrypted_random_picc_.GetNoArena();
}
inline void CMSG_DesfireAESAuth_Step1::set_encrypted_random_picc(const std::string& value) {
  
  encrypted_random_picc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireAESAuth_Step1.encrypted_random_picc)
}
inline void CMSG_DesfireAESAuth_Step1::set_encrypted_random_picc(std::string&& value) {
  
  encrypted_random_picc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireAESAuth_Step1.encrypted_random_picc)
}
inline void CMSG_DesfireAESAuth_Step1::set_encrypted_random_picc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_random_picc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireAESAuth_Step1.encrypted_random_picc)
}
inline void CMSG_DesfireAESAuth_Step1::set_encrypted_random_picc(const void* value, size_t size) {
  
  encrypted_random_picc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireAESAuth_Step1.encrypted_random_picc)
}
inline std::string* CMSG_DesfireAESAuth_Step1::mutable_encrypted_random_picc() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireAESAuth_Step1.encrypted_random_picc)
  return encrypted_random_picc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireAESAuth_Step1::release_encrypted_random_picc() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireAESAuth_Step1.encrypted_random_picc)
  
  return encrypted_random_picc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireAESAuth_Step1::set_allocated_encrypted_random_picc(std::string* encrypted_random_picc) {
  if (encrypted_random_picc != nullptr) {
    
  } else {
    
  }
  encrypted_random_picc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_random_picc);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireAESAuth_Step1.encrypted_random_picc)
}

// .KeyDiversificationInfo diversification = 3;
inline bool CMSG_DesfireAESAuth_Step1::has_diversification() const {
  return this != internal_default_instance() && diversification_ != nullptr;
}
inline void CMSG_DesfireAESAuth_Step1::clear_diversification() {
  if (GetArenaNoVirtual() == nullptr && diversification_ != nullptr) {
    delete diversification_;
  }
  diversification_ = nullptr;
}
inline const ::KeyDiversificationInfo& CMSG_DesfireAESAuth_Step1::diversification() const {
  const ::KeyDiversificationInfo* p = diversification_;
  // @@protoc_insertion_point(field_get:CMSG_DesfireAESAuth_Step1.diversification)
  return p != nullptr ? *p : *reinterpret_cast<const ::KeyDiversificationInfo*>(
      &::_KeyDiversificationInfo_default_instance_);
}
inline ::KeyDiversificationInfo* CMSG_DesfireAESAuth_Step1::release_diversification() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireAESAuth_Step1.diversification)
  
  ::KeyDiversificationInfo* temp = diversification_;
  diversification_ = nullptr;
  return temp;
}
inline ::KeyDiversificationInfo* CMSG_DesfireAESAuth_Step1::mutable_diversification() {
  
  if (diversification_ == nullptr) {
    auto* p = CreateMaybeMessage<::KeyDiversificationInfo>(GetArenaNoVirtual());
    diversification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireAESAuth_Step1.diversification)
  return diversification_;
}
inline void CMSG_DesfireAESAuth_Step1::set_allocated_diversification(::KeyDiversificationInfo* diversification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete diversification_;
  }
  if (diversification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diversification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diversification, submessage_arena);
    }
    
  } else {
    
  }
  diversification_ = diversification;
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireAESAuth_Step1.diversification)
}

// -------------------------------------------------------------------

// SMSG_DesfireAESAuth_Step1

// bool success = 1;
inline void SMSG_DesfireAESAuth_Step1::clear_success() {
  success_ = false;
}
inline bool SMSG_DesfireAESAuth_Step1::success() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireAESAuth_Step1.success)
  return success_;
}
inline void SMSG_DesfireAESAuth_Step1::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:SMSG_DesfireAESAuth_Step1.success)
}

// bytes encrypted_cryptogram = 3;
inline void SMSG_DesfireAESAuth_Step1::clear_encrypted_cryptogram() {
  encrypted_cryptogram_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_DesfireAESAuth_Step1::encrypted_cryptogram() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireAESAuth_Step1.encrypted_cryptogram)
  return encrypted_cryptogram_.GetNoArena();
}
inline void SMSG_DesfireAESAuth_Step1::set_encrypted_cryptogram(const std::string& value) {
  
  encrypted_cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_DesfireAESAuth_Step1.encrypted_cryptogram)
}
inline void SMSG_DesfireAESAuth_Step1::set_encrypted_cryptogram(std::string&& value) {
  
  encrypted_cryptogram_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_DesfireAESAuth_Step1.encrypted_cryptogram)
}
inline void SMSG_DesfireAESAuth_Step1::set_encrypted_cryptogram(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_DesfireAESAuth_Step1.encrypted_cryptogram)
}
inline void SMSG_DesfireAESAuth_Step1::set_encrypted_cryptogram(const void* value, size_t size) {
  
  encrypted_cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_DesfireAESAuth_Step1.encrypted_cryptogram)
}
inline std::string* SMSG_DesfireAESAuth_Step1::mutable_encrypted_cryptogram() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_DesfireAESAuth_Step1.encrypted_cryptogram)
  return encrypted_cryptogram_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_DesfireAESAuth_Step1::release_encrypted_cryptogram() {
  // @@protoc_insertion_point(field_release:SMSG_DesfireAESAuth_Step1.encrypted_cryptogram)
  
  return encrypted_cryptogram_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_DesfireAESAuth_Step1::set_allocated_encrypted_cryptogram(std::string* encrypted_cryptogram) {
  if (encrypted_cryptogram != nullptr) {
    
  } else {
    
  }
  encrypted_cryptogram_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_cryptogram);
  // @@protoc_insertion_point(field_set_allocated:SMSG_DesfireAESAuth_Step1.encrypted_cryptogram)
}

// bytes auth_context_id = 4;
inline void SMSG_DesfireAESAuth_Step1::clear_auth_context_id() {
  auth_context_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_DesfireAESAuth_Step1::auth_context_id() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireAESAuth_Step1.auth_context_id)
  return auth_context_id_.GetNoArena();
}
inline void SMSG_DesfireAESAuth_Step1::set_auth_context_id(const std::string& value) {
  
  auth_context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_DesfireAESAuth_Step1.auth_context_id)
}
inline void SMSG_DesfireAESAuth_Step1::set_auth_context_id(std::string&& value) {
  
  auth_context_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_DesfireAESAuth_Step1.auth_context_id)
}
inline void SMSG_DesfireAESAuth_Step1::set_auth_context_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_DesfireAESAuth_Step1.auth_context_id)
}
inline void SMSG_DesfireAESAuth_Step1::set_auth_context_id(const void* value, size_t size) {
  
  auth_context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_DesfireAESAuth_Step1.auth_context_id)
}
inline std::string* SMSG_DesfireAESAuth_Step1::mutable_auth_context_id() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_DesfireAESAuth_Step1.auth_context_id)
  return auth_context_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_DesfireAESAuth_Step1::release_auth_context_id() {
  // @@protoc_insertion_point(field_release:SMSG_DesfireAESAuth_Step1.auth_context_id)
  
  return auth_context_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_DesfireAESAuth_Step1::set_allocated_auth_context_id(std::string* auth_context_id) {
  if (auth_context_id != nullptr) {
    
  } else {
    
  }
  auth_context_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_context_id);
  // @@protoc_insertion_point(field_set_allocated:SMSG_DesfireAESAuth_Step1.auth_context_id)
}

// -------------------------------------------------------------------

// CMSG_DesfireISOAuth_Step1

// string key_uuid = 1;
inline void CMSG_DesfireISOAuth_Step1::clear_key_uuid() {
  key_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireISOAuth_Step1::key_uuid() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireISOAuth_Step1.key_uuid)
  return key_uuid_.GetNoArena();
}
inline void CMSG_DesfireISOAuth_Step1::set_key_uuid(const std::string& value) {
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireISOAuth_Step1.key_uuid)
}
inline void CMSG_DesfireISOAuth_Step1::set_key_uuid(std::string&& value) {
  
  key_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireISOAuth_Step1.key_uuid)
}
inline void CMSG_DesfireISOAuth_Step1::set_key_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireISOAuth_Step1.key_uuid)
}
inline void CMSG_DesfireISOAuth_Step1::set_key_uuid(const char* value, size_t size) {
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireISOAuth_Step1.key_uuid)
}
inline std::string* CMSG_DesfireISOAuth_Step1::mutable_key_uuid() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireISOAuth_Step1.key_uuid)
  return key_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireISOAuth_Step1::release_key_uuid() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireISOAuth_Step1.key_uuid)
  
  return key_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireISOAuth_Step1::set_allocated_key_uuid(std::string* key_uuid) {
  if (key_uuid != nullptr) {
    
  } else {
    
  }
  key_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_uuid);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireISOAuth_Step1.key_uuid)
}

// bytes random_picc = 2;
inline void CMSG_DesfireISOAuth_Step1::clear_random_picc() {
  random_picc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireISOAuth_Step1::random_picc() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireISOAuth_Step1.random_picc)
  return random_picc_.GetNoArena();
}
inline void CMSG_DesfireISOAuth_Step1::set_random_picc(const std::string& value) {
  
  random_picc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireISOAuth_Step1.random_picc)
}
inline void CMSG_DesfireISOAuth_Step1::set_random_picc(std::string&& value) {
  
  random_picc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireISOAuth_Step1.random_picc)
}
inline void CMSG_DesfireISOAuth_Step1::set_random_picc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  random_picc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireISOAuth_Step1.random_picc)
}
inline void CMSG_DesfireISOAuth_Step1::set_random_picc(const void* value, size_t size) {
  
  random_picc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireISOAuth_Step1.random_picc)
}
inline std::string* CMSG_DesfireISOAuth_Step1::mutable_random_picc() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireISOAuth_Step1.random_picc)
  return random_picc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireISOAuth_Step1::release_random_picc() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireISOAuth_Step1.random_picc)
  
  return random_picc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireISOAuth_Step1::set_allocated_random_picc(std::string* random_picc) {
  if (random_picc != nullptr) {
    
  } else {
    
  }
  random_picc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), random_picc);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireISOAuth_Step1.random_picc)
}

// .KeyDiversificationInfo diversification = 3;
inline bool CMSG_DesfireISOAuth_Step1::has_diversification() const {
  return this != internal_default_instance() && diversification_ != nullptr;
}
inline void CMSG_DesfireISOAuth_Step1::clear_diversification() {
  if (GetArenaNoVirtual() == nullptr && diversification_ != nullptr) {
    delete diversification_;
  }
  diversification_ = nullptr;
}
inline const ::KeyDiversificationInfo& CMSG_DesfireISOAuth_Step1::diversification() const {
  const ::KeyDiversificationInfo* p = diversification_;
  // @@protoc_insertion_point(field_get:CMSG_DesfireISOAuth_Step1.diversification)
  return p != nullptr ? *p : *reinterpret_cast<const ::KeyDiversificationInfo*>(
      &::_KeyDiversificationInfo_default_instance_);
}
inline ::KeyDiversificationInfo* CMSG_DesfireISOAuth_Step1::release_diversification() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireISOAuth_Step1.diversification)
  
  ::KeyDiversificationInfo* temp = diversification_;
  diversification_ = nullptr;
  return temp;
}
inline ::KeyDiversificationInfo* CMSG_DesfireISOAuth_Step1::mutable_diversification() {
  
  if (diversification_ == nullptr) {
    auto* p = CreateMaybeMessage<::KeyDiversificationInfo>(GetArenaNoVirtual());
    diversification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireISOAuth_Step1.diversification)
  return diversification_;
}
inline void CMSG_DesfireISOAuth_Step1::set_allocated_diversification(::KeyDiversificationInfo* diversification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete diversification_;
  }
  if (diversification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diversification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diversification, submessage_arena);
    }
    
  } else {
    
  }
  diversification_ = diversification;
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireISOAuth_Step1.diversification)
}

// -------------------------------------------------------------------

// SMSG_DesfireISOAuth_Step1

// bool success = 1;
inline void SMSG_DesfireISOAuth_Step1::clear_success() {
  success_ = false;
}
inline bool SMSG_DesfireISOAuth_Step1::success() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireISOAuth_Step1.success)
  return success_;
}
inline void SMSG_DesfireISOAuth_Step1::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:SMSG_DesfireISOAuth_Step1.success)
}

// bytes random2 = 2;
inline void SMSG_DesfireISOAuth_Step1::clear_random2() {
  random2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_DesfireISOAuth_Step1::random2() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireISOAuth_Step1.random2)
  return random2_.GetNoArena();
}
inline void SMSG_DesfireISOAuth_Step1::set_random2(const std::string& value) {
  
  random2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_DesfireISOAuth_Step1.random2)
}
inline void SMSG_DesfireISOAuth_Step1::set_random2(std::string&& value) {
  
  random2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_DesfireISOAuth_Step1.random2)
}
inline void SMSG_DesfireISOAuth_Step1::set_random2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  random2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_DesfireISOAuth_Step1.random2)
}
inline void SMSG_DesfireISOAuth_Step1::set_random2(const void* value, size_t size) {
  
  random2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_DesfireISOAuth_Step1.random2)
}
inline std::string* SMSG_DesfireISOAuth_Step1::mutable_random2() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_DesfireISOAuth_Step1.random2)
  return random2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_DesfireISOAuth_Step1::release_random2() {
  // @@protoc_insertion_point(field_release:SMSG_DesfireISOAuth_Step1.random2)
  
  return random2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_DesfireISOAuth_Step1::set_allocated_random2(std::string* random2) {
  if (random2 != nullptr) {
    
  } else {
    
  }
  random2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), random2);
  // @@protoc_insertion_point(field_set_allocated:SMSG_DesfireISOAuth_Step1.random2)
}

// bytes encrypted_cryptogram = 3;
inline void SMSG_DesfireISOAuth_Step1::clear_encrypted_cryptogram() {
  encrypted_cryptogram_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_DesfireISOAuth_Step1::encrypted_cryptogram() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireISOAuth_Step1.encrypted_cryptogram)
  return encrypted_cryptogram_.GetNoArena();
}
inline void SMSG_DesfireISOAuth_Step1::set_encrypted_cryptogram(const std::string& value) {
  
  encrypted_cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_DesfireISOAuth_Step1.encrypted_cryptogram)
}
inline void SMSG_DesfireISOAuth_Step1::set_encrypted_cryptogram(std::string&& value) {
  
  encrypted_cryptogram_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_DesfireISOAuth_Step1.encrypted_cryptogram)
}
inline void SMSG_DesfireISOAuth_Step1::set_encrypted_cryptogram(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_DesfireISOAuth_Step1.encrypted_cryptogram)
}
inline void SMSG_DesfireISOAuth_Step1::set_encrypted_cryptogram(const void* value, size_t size) {
  
  encrypted_cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_DesfireISOAuth_Step1.encrypted_cryptogram)
}
inline std::string* SMSG_DesfireISOAuth_Step1::mutable_encrypted_cryptogram() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_DesfireISOAuth_Step1.encrypted_cryptogram)
  return encrypted_cryptogram_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_DesfireISOAuth_Step1::release_encrypted_cryptogram() {
  // @@protoc_insertion_point(field_release:SMSG_DesfireISOAuth_Step1.encrypted_cryptogram)
  
  return encrypted_cryptogram_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_DesfireISOAuth_Step1::set_allocated_encrypted_cryptogram(std::string* encrypted_cryptogram) {
  if (encrypted_cryptogram != nullptr) {
    
  } else {
    
  }
  encrypted_cryptogram_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_cryptogram);
  // @@protoc_insertion_point(field_set_allocated:SMSG_DesfireISOAuth_Step1.encrypted_cryptogram)
}

// bytes auth_context_id = 4;
inline void SMSG_DesfireISOAuth_Step1::clear_auth_context_id() {
  auth_context_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_DesfireISOAuth_Step1::auth_context_id() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireISOAuth_Step1.auth_context_id)
  return auth_context_id_.GetNoArena();
}
inline void SMSG_DesfireISOAuth_Step1::set_auth_context_id(const std::string& value) {
  
  auth_context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_DesfireISOAuth_Step1.auth_context_id)
}
inline void SMSG_DesfireISOAuth_Step1::set_auth_context_id(std::string&& value) {
  
  auth_context_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_DesfireISOAuth_Step1.auth_context_id)
}
inline void SMSG_DesfireISOAuth_Step1::set_auth_context_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_DesfireISOAuth_Step1.auth_context_id)
}
inline void SMSG_DesfireISOAuth_Step1::set_auth_context_id(const void* value, size_t size) {
  
  auth_context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_DesfireISOAuth_Step1.auth_context_id)
}
inline std::string* SMSG_DesfireISOAuth_Step1::mutable_auth_context_id() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_DesfireISOAuth_Step1.auth_context_id)
  return auth_context_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_DesfireISOAuth_Step1::release_auth_context_id() {
  // @@protoc_insertion_point(field_release:SMSG_DesfireISOAuth_Step1.auth_context_id)
  
  return auth_context_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_DesfireISOAuth_Step1::set_allocated_auth_context_id(std::string* auth_context_id) {
  if (auth_context_id != nullptr) {
    
  } else {
    
  }
  auth_context_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_context_id);
  // @@protoc_insertion_point(field_set_allocated:SMSG_DesfireISOAuth_Step1.auth_context_id)
}

// -------------------------------------------------------------------

// CMSG_DesfireAuth_Step2

// string key_uuid = 1;
inline void CMSG_DesfireAuth_Step2::clear_key_uuid() {
  key_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireAuth_Step2::key_uuid() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireAuth_Step2.key_uuid)
  return key_uuid_.GetNoArena();
}
inline void CMSG_DesfireAuth_Step2::set_key_uuid(const std::string& value) {
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireAuth_Step2.key_uuid)
}
inline void CMSG_DesfireAuth_Step2::set_key_uuid(std::string&& value) {
  
  key_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireAuth_Step2.key_uuid)
}
inline void CMSG_DesfireAuth_Step2::set_key_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireAuth_Step2.key_uuid)
}
inline void CMSG_DesfireAuth_Step2::set_key_uuid(const char* value, size_t size) {
  
  key_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireAuth_Step2.key_uuid)
}
inline std::string* CMSG_DesfireAuth_Step2::mutable_key_uuid() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireAuth_Step2.key_uuid)
  return key_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireAuth_Step2::release_key_uuid() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireAuth_Step2.key_uuid)
  
  return key_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireAuth_Step2::set_allocated_key_uuid(std::string* key_uuid) {
  if (key_uuid != nullptr) {
    
  } else {
    
  }
  key_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_uuid);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireAuth_Step2.key_uuid)
}

// bytes picc_cryptogram = 2;
inline void CMSG_DesfireAuth_Step2::clear_picc_cryptogram() {
  picc_cryptogram_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireAuth_Step2::picc_cryptogram() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireAuth_Step2.picc_cryptogram)
  return picc_cryptogram_.GetNoArena();
}
inline void CMSG_DesfireAuth_Step2::set_picc_cryptogram(const std::string& value) {
  
  picc_cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireAuth_Step2.picc_cryptogram)
}
inline void CMSG_DesfireAuth_Step2::set_picc_cryptogram(std::string&& value) {
  
  picc_cryptogram_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireAuth_Step2.picc_cryptogram)
}
inline void CMSG_DesfireAuth_Step2::set_picc_cryptogram(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  picc_cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireAuth_Step2.picc_cryptogram)
}
inline void CMSG_DesfireAuth_Step2::set_picc_cryptogram(const void* value, size_t size) {
  
  picc_cryptogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireAuth_Step2.picc_cryptogram)
}
inline std::string* CMSG_DesfireAuth_Step2::mutable_picc_cryptogram() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireAuth_Step2.picc_cryptogram)
  return picc_cryptogram_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireAuth_Step2::release_picc_cryptogram() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireAuth_Step2.picc_cryptogram)
  
  return picc_cryptogram_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireAuth_Step2::set_allocated_picc_cryptogram(std::string* picc_cryptogram) {
  if (picc_cryptogram != nullptr) {
    
  } else {
    
  }
  picc_cryptogram_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picc_cryptogram);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireAuth_Step2.picc_cryptogram)
}

// bytes auth_context_id = 3;
inline void CMSG_DesfireAuth_Step2::clear_auth_context_id() {
  auth_context_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMSG_DesfireAuth_Step2::auth_context_id() const {
  // @@protoc_insertion_point(field_get:CMSG_DesfireAuth_Step2.auth_context_id)
  return auth_context_id_.GetNoArena();
}
inline void CMSG_DesfireAuth_Step2::set_auth_context_id(const std::string& value) {
  
  auth_context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMSG_DesfireAuth_Step2.auth_context_id)
}
inline void CMSG_DesfireAuth_Step2::set_auth_context_id(std::string&& value) {
  
  auth_context_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMSG_DesfireAuth_Step2.auth_context_id)
}
inline void CMSG_DesfireAuth_Step2::set_auth_context_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMSG_DesfireAuth_Step2.auth_context_id)
}
inline void CMSG_DesfireAuth_Step2::set_auth_context_id(const void* value, size_t size) {
  
  auth_context_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMSG_DesfireAuth_Step2.auth_context_id)
}
inline std::string* CMSG_DesfireAuth_Step2::mutable_auth_context_id() {
  
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireAuth_Step2.auth_context_id)
  return auth_context_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMSG_DesfireAuth_Step2::release_auth_context_id() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireAuth_Step2.auth_context_id)
  
  return auth_context_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMSG_DesfireAuth_Step2::set_allocated_auth_context_id(std::string* auth_context_id) {
  if (auth_context_id != nullptr) {
    
  } else {
    
  }
  auth_context_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_context_id);
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireAuth_Step2.auth_context_id)
}

// .KeyDiversificationInfo diversification = 4;
inline bool CMSG_DesfireAuth_Step2::has_diversification() const {
  return this != internal_default_instance() && diversification_ != nullptr;
}
inline void CMSG_DesfireAuth_Step2::clear_diversification() {
  if (GetArenaNoVirtual() == nullptr && diversification_ != nullptr) {
    delete diversification_;
  }
  diversification_ = nullptr;
}
inline const ::KeyDiversificationInfo& CMSG_DesfireAuth_Step2::diversification() const {
  const ::KeyDiversificationInfo* p = diversification_;
  // @@protoc_insertion_point(field_get:CMSG_DesfireAuth_Step2.diversification)
  return p != nullptr ? *p : *reinterpret_cast<const ::KeyDiversificationInfo*>(
      &::_KeyDiversificationInfo_default_instance_);
}
inline ::KeyDiversificationInfo* CMSG_DesfireAuth_Step2::release_diversification() {
  // @@protoc_insertion_point(field_release:CMSG_DesfireAuth_Step2.diversification)
  
  ::KeyDiversificationInfo* temp = diversification_;
  diversification_ = nullptr;
  return temp;
}
inline ::KeyDiversificationInfo* CMSG_DesfireAuth_Step2::mutable_diversification() {
  
  if (diversification_ == nullptr) {
    auto* p = CreateMaybeMessage<::KeyDiversificationInfo>(GetArenaNoVirtual());
    diversification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMSG_DesfireAuth_Step2.diversification)
  return diversification_;
}
inline void CMSG_DesfireAuth_Step2::set_allocated_diversification(::KeyDiversificationInfo* diversification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete diversification_;
  }
  if (diversification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diversification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diversification, submessage_arena);
    }
    
  } else {
    
  }
  diversification_ = diversification;
  // @@protoc_insertion_point(field_set_allocated:CMSG_DesfireAuth_Step2.diversification)
}

// -------------------------------------------------------------------

// SMSG_DesfireAuth_Step2

// bool success = 1;
inline void SMSG_DesfireAuth_Step2::clear_success() {
  success_ = false;
}
inline bool SMSG_DesfireAuth_Step2::success() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireAuth_Step2.success)
  return success_;
}
inline void SMSG_DesfireAuth_Step2::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:SMSG_DesfireAuth_Step2.success)
}

// bytes session_key = 2;
inline void SMSG_DesfireAuth_Step2::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_DesfireAuth_Step2::session_key() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireAuth_Step2.session_key)
  return session_key_.GetNoArena();
}
inline void SMSG_DesfireAuth_Step2::set_session_key(const std::string& value) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_DesfireAuth_Step2.session_key)
}
inline void SMSG_DesfireAuth_Step2::set_session_key(std::string&& value) {
  
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_DesfireAuth_Step2.session_key)
}
inline void SMSG_DesfireAuth_Step2::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_DesfireAuth_Step2.session_key)
}
inline void SMSG_DesfireAuth_Step2::set_session_key(const void* value, size_t size) {
  
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_DesfireAuth_Step2.session_key)
}
inline std::string* SMSG_DesfireAuth_Step2::mutable_session_key() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_DesfireAuth_Step2.session_key)
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_DesfireAuth_Step2::release_session_key() {
  // @@protoc_insertion_point(field_release:SMSG_DesfireAuth_Step2.session_key)
  
  return session_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_DesfireAuth_Step2::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:SMSG_DesfireAuth_Step2.session_key)
}

// string session_key_ref = 3;
inline void SMSG_DesfireAuth_Step2::clear_session_key_ref() {
  session_key_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SMSG_DesfireAuth_Step2::session_key_ref() const {
  // @@protoc_insertion_point(field_get:SMSG_DesfireAuth_Step2.session_key_ref)
  return session_key_ref_.GetNoArena();
}
inline void SMSG_DesfireAuth_Step2::set_session_key_ref(const std::string& value) {
  
  session_key_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SMSG_DesfireAuth_Step2.session_key_ref)
}
inline void SMSG_DesfireAuth_Step2::set_session_key_ref(std::string&& value) {
  
  session_key_ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SMSG_DesfireAuth_Step2.session_key_ref)
}
inline void SMSG_DesfireAuth_Step2::set_session_key_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_key_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SMSG_DesfireAuth_Step2.session_key_ref)
}
inline void SMSG_DesfireAuth_Step2::set_session_key_ref(const char* value, size_t size) {
  
  session_key_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SMSG_DesfireAuth_Step2.session_key_ref)
}
inline std::string* SMSG_DesfireAuth_Step2::mutable_session_key_ref() {
  
  // @@protoc_insertion_point(field_mutable:SMSG_DesfireAuth_Step2.session_key_ref)
  return session_key_ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SMSG_DesfireAuth_Step2::release_session_key_ref() {
  // @@protoc_insertion_point(field_release:SMSG_DesfireAuth_Step2.session_key_ref)
  
  return session_key_ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SMSG_DesfireAuth_Step2::set_allocated_session_key_ref(std::string* session_key_ref) {
  if (session_key_ref != nullptr) {
    
  } else {
    
  }
  session_key_ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key_ref);
  // @@protoc_insertion_point(field_set_allocated:SMSG_DesfireAuth_Step2.session_key_ref)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KeyDiversificationInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KeyDiversificationInfo_Type>() {
  return ::KeyDiversificationInfo_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_iks_2eproto
